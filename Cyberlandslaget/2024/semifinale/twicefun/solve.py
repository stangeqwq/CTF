from mpmath import mp
from Crypto.Util.number import getPrime, isPrime, bytes_to_long

# Set the precision (number of decimal places)
mp.dps = 5000  # Increase this value for higher precision
n = mp.mpf("1504669465049250683772825812578432054507293469234421835013894405310029960001983693956912395839709925438318274076100369116441789151651472045481303645596451178044586947308741326342766946348630525172225455603087171717275879906781697990672417080309828718603899890408758061554793354470946237190153046132595139051833787905084525716653409952939965245932629241867891105816295312963551089357342449126371563191942303757697572037235418723425388339389144253372697659489780008584869576092272222910562814998683399481883646227829886163589601081060863166903096435784100163915678274553319845314634193005315230701522142083632691208361739899372423774622550914730653670856567925991737570190700269083750650059188495925847590358041692543397415444779391909829587672451139072901892332418440718339037451719206793643432918776943522136979576087474253202699170303465845463979782634173216861141355335128763721879090387732568316702463122261502225660041393")
smallest = 10e100
for N in range(500):

    # Define the coefficients of the cubic polynomial ax^3 + bx^2 + cx + d = 0
    a = mp.mpf("1")  # Convert to mpf for arbitrary-precision
    b = mp.mpf(f"{N + 1/2}")
    c = mp.mpf("0")
    d = -mp.mpf(n/2)
    p = -b/(3*a)
    q = p**3 + (b*c - 3*a*d) / (6*(a**2))
    r = c / (3*a)
    prime_guess = int(mp.cbrt(q + mp.sqrt(q**2 + (r-p**2)**3)) +  mp.cbrt(q - mp.sqrt(q**2 + (r-p**2)**3)) + p)
    for i in range(0, 10**3):
        n_guess = n - abs((prime_guess)*(prime_guess)*(2*prime_guess+1+2*N))
        if abs(n_guess) == 0: 
            print(f"p={prime_guess}")
            print(f"N={N}")
            print(f"n - guess: {n_guess}")
            print(f"n ={n}")
            print(f"guess = {abs((prime_guess)*(prime_guess)*(2*prime_guess+1+2*N))}")
            break
        prime_guess += 1
'''        
# n = p^2 (2p + 1 + 2N)
# sqrt(n) ~ p * sqrt(2p + 1 + 2N)
# n/2 = p^3 + p^2*(N + 1/2) (N guessing)
# p^3 + p^2* (N + 1/2) - n/2 = 0  solving for p
'''